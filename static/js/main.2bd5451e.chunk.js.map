{"version":3,"sources":["components/button.js","components/noteslist.js","components/addnote.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","className","cls","onClick","noteId","buttonText","NotesList","notes","map","note","index","key","editNote","editing","id","aria-label","onChange","onInput","value","editTitle","title","editDescription","description","onSaveClick","onEditClick","onDeleteClick","AddNote","htmlFor","addTitle","addDescription","App","handleInput","event","target","includes","setState","newNote","state","handleSave","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","notesList","concat","catch","error","console","handleEdit","noteToEdit","find","obj","handleSaveEdit","editIndex","indexOf","copyOfNoteToEdit","handleDelete","ok","prevState","filter","res","data","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2bd5451e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Button (props) {\r\n   return (\r\n      <button type=\"button\" className={props.cls} onClick={() => props.onClick(props.noteId)}>{props.buttonText}</button>\r\n   )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport Button from './button.js'\r\nimport '../css/noteslist.css'\r\n\r\nfunction NotesList (props) {\r\n   return (\r\n      <section>\r\n         <h2>All Notes</h2>\r\n         <ul className=\"notes-list\">\r\n           {props.notes.map((note, index) => (\r\n              <li key={index} className=\"note\">\r\n              <div>{props.editNote.editing === note.id\r\n                 ? <input id=\"editTitle\" aria-label=\"Title\" onChange={props.onInput} value={props.editNote.editTitle} />\r\n                 : <h3>{note.title}</h3> }\r\n               </div>\r\n               <div>{props.editNote.editing === note.id\r\n                  ? < input id=\"editDescription\" aria-label=\"Description\" onChange={props.onInput} value={props.editNote.editDescription} />\r\n                  : <p>{note.description}</p> }\r\n               </div>\r\n               { props.editNote.editing === note.id\r\n               ? <Button cls=\"save\" noteId={note.id} onClick={props.onSaveClick} buttonText=\"Save\" />\r\n               : <Button cls=\"edit\" noteId={note.id} onClick={props.onEditClick} buttonText=\"Edit\" />\r\n               }\r\n\r\n               <Button cls=\"delete\" noteId={note.id} onClick={props.onDeleteClick} buttonText=\"Delete\" />\r\n              </li>\r\n           ))}\r\n         </ul>\r\n      </section>\r\n   )\r\n}\r\n\r\nexport default NotesList\r\n","import React from 'react'\r\nimport '../css/addnote.css'\r\n\r\nfunction AddNote (props) {\r\n   return (\r\n      <section>\r\n         <h2>Add Note</h2>\r\n         <form>\r\n            <label htmlFor=\"addTitle\">Title</label>\r\n            <input id=\"addTitle\" value={props.note.addTitle ? props.note.addTitle : ''} onChange={props.onInput} />\r\n            <label htmlFor=\"addDescription\">Description</label>\r\n            <input id=\"addDescription\" value={props.note.addDescription ? props.note.addDescription : ''} onChange={props.onInput} />\r\n            <button type=\"button\" className=\"add\" onClick={props.onSaveClick}>Save</button>\r\n         </form>\r\n      </section>\r\n   )\r\n}\r\n\r\nexport default AddNote\r\n","import React from 'react';\r\nimport NotesList from './components/noteslist'\r\nimport AddNote from './components/addnote'\r\n\r\nclass App extends React.Component {\r\n   constructor(props) {\r\n     super(props)\r\n     this.state = {\r\n        newNote: {},\r\n        notesList: [],\r\n        editNote: {},\r\n     }\r\n  }\r\n  componentDidMount () {\r\n     fetch('https://timesheet-1172.appspot.com/a529f225/notes')\r\n     .then(res => res.json())\r\n     .then((data) => {\r\n        this.setState({ notesList: data })\r\n        })\r\n        .catch(console.log)\r\n }\r\n\r\n handleInput = (event) => {\r\n    if (event.target.id.includes('add') ){\r\n       this.setState({\r\n         newNote: {\r\n            ...this.state.newNote,\r\n            [event.target.id]: event.target.value\r\n         }\r\n      })\r\n   }\r\n   else {\r\n      this.setState({\r\n        editNote: {\r\n           ...this.state.editNote,\r\n           [event.target.id]: event.target.value\r\n        }\r\n     })\r\n   }\r\n}\r\n\r\nhandleSave = (event) => {\r\n   event.preventDefault();\r\n   fetch('https://timesheet-1172.appspot.com/a529f225/notes', {\r\n     method: 'POST',\r\n     headers: {\r\n       'Content-Type': 'application/json',\r\n     },\r\n     body: JSON.stringify({\r\n       title: this.state.newNote.addTitle,\r\n       description: this.state.newNote.addDescription\r\n     })\r\n   })\r\n   .then( (response) => response.json())\r\n   .then((json) => {\r\n      this.setState({\r\n         newNote: {},\r\n         notesList: this.state.notesList.concat(json)\r\n     })\r\n   })\r\n   .catch((error) => console.error(error))\r\n}\r\n\r\nhandleEdit = (id) => {\r\n   let noteToEdit = this.state.notesList.find(obj => obj.id === id);\r\n   this.setState({\r\n      editNote: {\r\n         ...this.state.editNote,\r\n         editing: id,\r\n         editTitle: noteToEdit.title,\r\n         editDescription: noteToEdit.description\r\n      }\r\n   })\r\n}\r\n\r\nhandleSaveEdit = (id) => {\r\n   fetch(`https://timesheet-1172.appspot.com/a529f225/notes/${id}`, {\r\n     method: 'PUT',\r\n     headers: {\r\n      'Content-Type': 'application/json',\r\n     },\r\n     body: JSON.stringify({\r\n      title: this.state.editNote.editTitle,\r\n      description: this.state.editNote.editDescription\r\n     })\r\n   })\r\n   .then( (response) => response.json())\r\n   .then((json) => {\r\n      let notes = [...this.state.notesList]\r\n      let noteToEdit = this.state.notesList.find(obj => obj.id === id)\r\n      let editIndex = this.state.notesList.indexOf(noteToEdit)\r\n      let copyOfNoteToEdit = {...notes[editIndex]}\r\n      copyOfNoteToEdit.id = json.id\r\n      copyOfNoteToEdit.title = json.title\r\n      copyOfNoteToEdit.description = json.description\r\n      notes[editIndex] = copyOfNoteToEdit\r\n      this.setState({\r\n         editNote: {},\r\n         notesList: notes\r\n     })\r\n   })\r\n   .catch((error) => console.error(error))\r\n}\r\n\r\nhandleDelete = (id) => {\r\n   fetch(`https://timesheet-1172.appspot.com/a529f225/notes/${id}`, {\r\n     method: 'DELETE'\r\n   })\r\n   .then( (response) => {\r\n      if (response.ok){\r\n         this.setState(prevState => ({\r\n           notesList: prevState.notesList.filter(note => note.id !== id )\r\n       }));\r\n      }\r\n   })\r\n   .catch((error) => console.error(error))\r\n}\r\n\r\n  render(){\r\n     return (\r\n        <div>\r\n           <header>\r\n             <h1>Notes App</h1>\r\n          </header>\r\n          <main>\r\n             <AddNote\r\n                onInput={this.handleInput}\r\n                note={this.state.newNote}\r\n                onSaveClick={this.handleSave}\r\n               />\r\n             <NotesList\r\n                notes={this.state.notesList}\r\n                onEditClick={this.handleEdit}\r\n                editNote={this.state.editNote}\r\n                onInput={this.handleInput}\r\n                onSaveClick={this.handleSaveEdit}\r\n                onDeleteClick={this.handleDelete}\r\n               />\r\n          </main>\r\n        </div>\r\n     )\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}